#!/usr/bin/env python3
"""
Automated Mawaqit Prayer Times Uploader
Handles Gmail 2FA and uploads CSV prayer times to Mawaqit backoffice
"""

import imaplib
import email
import re
import time
import os
import csv
from datetime import datetime
from playwright.sync_api import sync_playwright, expect

def get_latest_mawaqit_2fa_code(gmail_user, gmail_app_password, max_wait=120):
    """
    Fetch the latest 2FA code from Gmail for Mawaqit
    """
    print("üîç Checking Gmail for 2FA code...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait:
        try:
            # Connect to Gmail via IMAP
            imap = imaplib.IMAP4_SSL("imap.gmail.com")
            imap.login(gmail_user, gmail_app_password)
            imap.select("inbox")

            # Search for recent emails from Mawaqit
            status, messages = imap.search(None, '(FROM "noreply@mawaqit.net" OR FROM "no-reply@mawaqit.net")')
            
            if status != 'OK' or not messages[0]:
                print("‚è≥ No Mawaqit emails found, waiting...")
                time.sleep(10)
                continue

            mail_ids = messages[0].split()
            
            # Check the most recent emails for 2FA code
            for mail_id in reversed(mail_ids[-5:]):  # Check last 5 emails
                status, msg_data = imap.fetch(mail_id, "(RFC822)")
                if status != 'OK':
                    continue
                    
                raw_msg = msg_data[0][1]
                msg = email.message_from_bytes(raw_msg)
                
                # Get email date
                email_date = email.utils.parsedate_to_datetime(msg['Date'])
                
                # Only process emails from the last 10 minutes
                if (datetime.now(email_date.tzinfo) - email_date).total_seconds() > 600:
                    continue
                
                # Extract email body
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            try:
                                body += part.get_payload(decode=True).decode('utf-8', errors='ignore')
                            except:
                                continue
                else:
                    try:
                        body = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
                    except:
                        continue

                # Look for 6-digit verification code
                code_match = re.search(r'\b(\d{6})\b', body)
                if code_match and 'verification' in body.lower():
                    code = code_match.group(1)
                    print(f"‚úÖ Found 2FA code: {code}")
                    imap.close()
                    imap.logout()
                    return code
            
            print("‚è≥ No recent 2FA code found, waiting...")
            imap.close()
            imap.logout()
            time.sleep(10)
            
        except Exception as e:
            print(f"‚ùå Error checking email: {e}")
            time.sleep(10)
    
    print("‚ùå Timeout waiting for 2FA code")
    return None

def read_prayer_times_csv(csv_file_path):
    """
    Read prayer times from CSV file generated by scraper
    Returns dict with dates as keys and prayer times as values
    """
    prayer_times = {}
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # Adjust these column names based on your CSV structure
                date = row.get('Date') or row.get('date')
                fajr = row.get('Fajr') or row.get('fajr')
                sunrise = row.get('Sunrise') or row.get('sunrise')
                dhuhr = row.get('Dhuhr') or row.get('dhuhr')
                asr = row.get('Asr') or row.get('asr')
                maghrib = row.get('Maghrib') or row.get('maghrib')
                isha = row.get('Isha') or row.get('isha')
                
                if date and fajr and dhuhr and asr and maghrib and isha:
                    prayer_times[date] = {
                        'fajr': fajr,
                        'sunrise': sunrise,
                        'dhuhr': dhuhr,
                        'asr': asr,
                        'maghrib': maghrib,
                        'isha': isha
                    }
    except Exception as e:
        print(f"‚ùå Error reading CSV: {e}")
        return {}
    
    print(f"üìä Loaded {len(prayer_times)} days of prayer times from CSV")
    return prayer_times

def upload_to_mawaqit(mawaqit_email, mawaqit_password, gmail_user, gmail_app_password, csv_file_path):
    """
    Main function to login to Mawaqit and upload prayer times
    """
    print("üöÄ Starting Mawaqit upload process...")
    
    # Read prayer times from CSV
    prayer_times = read_prayer_times_csv(csv_file_path)
    if not prayer_times:
        print("‚ùå No prayer times found in CSV")
        return False
    
    with sync_playwright() as p:
        # Launch browser
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()
        
        try:
            # Navigate to Mawaqit login
            print("üåê Navigating to Mawaqit login...")
            page.goto("https://mawaqit.net/en/backoffice/login", wait_until="networkidle")
            
            # Fill login form
            print("üìù Filling login credentials...")
            page.fill('input[type="email"]', mawaqit_email)
            page.fill('input[type="password"]', mawaqit_password)
            
            # Submit login
            page.click('button[type="submit"]')
            print("üîë Login submitted, waiting for 2FA...")
            
            # Wait for 2FA page or dashboard
            page.wait_for_load_state("networkidle")
            
            # Check if 2FA is required
            if "verification" in page.content().lower() or "code" in page.content().lower():
                print("üìß 2FA required, fetching code from Gmail...")
                
                # Get 2FA code from email
                verification_code = get_latest_mawaqit_2fa_code(gmail_user, gmail_app_password)
                
                if not verification_code:
                    print("‚ùå Failed to get 2FA code")
                    return False
                
                # Enter 2FA code
                code_input = page.locator('input[placeholder*="code" i], input[name*="code" i], input[type="text"]').first
                code_input.fill(verification_code)
                
                # Submit 2FA
                page.click('button[type="submit"]')
                print("‚úÖ 2FA code submitted")
                
                page.wait_for_load_state("networkidle")
            
            # Navigate to mosque/prayer times configuration
            print("üèõÔ∏è Navigating to prayer times configuration...")
            
            # Look for mosque/configuration links (adjust selectors as needed)
            try:
                # Try different possible navigation paths
                if page.locator('a:has-text("Mosque")').count() > 0:
                    page.click('a:has-text("Mosque")')
                elif page.locator('a:has-text("Configuration")').count() > 0:
                    page.click('a:has-text("Configuration")')
                elif page.locator('a:has-text("Prayer Times")').count() > 0:
                    page.click('a:has-text("Prayer Times")')
                
                page.wait_for_load_state("networkidle")
                
                # Look for Athan/Iqama or Prayer Times section
                if page.locator('a:has-text("Athan")').count() > 0:
                    page.click('a:has-text("Athan")')
                elif page.locator('a:has-text("Prayer")').count() > 0:
                    page.click('a:has-text("Prayer")')
                
                page.wait_for_load_state("networkidle")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Navigation error: {e}")
                print("üîç Current page content preview:")
                print(page.content()[:500] + "...")
            
            # Here you would add the specific logic to fill prayer times
            # This part needs to be customized based on Mawaqit's actual form structure
            print("üìÖ Filling prayer times...")
            print("‚ö†Ô∏è Prayer time filling logic needs to be customized for Mawaqit's interface")
            
            # Placeholder for prayer times upload logic
            # You'll need to inspect Mawaqit's form and adjust these selectors
            """
            for date, times in prayer_times.items():
                # Example of how you might fill forms:
                page.fill(f'input[name="fajr_{date}"]', times['fajr'])
                page.fill(f'input[name="dhuhr_{date}"]', times['dhuhr'])
                # ... etc for all prayer times
            """
            
            print("‚úÖ Upload process completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Error during upload: {e}")
            return False
        finally:
            browser.close()

def main():
    """
    Main entry point
    """
    # Get credentials from environment variables
    mawaqit_email = os.getenv('MAWAQIT_USER')
    mawaqit_password = os.getenv('MAWAQIT_PASS')
    gmail_user = os.getenv('GMAIL_USER')
    gmail_app_password = os.getenv('GMAIL_APP_PASSWORD')
    
    # Path to your CSV file (adjust as needed)
    csv_file_path = os.getenv('CSV_FILE_PATH', 'prayer_times.csv')
    
    if not all([mawaqit_email, mawaqit_password, gmail_user, gmail_app_password]):
        print("‚ùå Missing required environment variables")
        print("Required: MAWAQIT_USER, MAWAQIT_PASS, GMAIL_USER, GMAIL_APP_PASSWORD")
        return False
    
    success = upload_to_mawaqit(
        mawaqit_email=mawaqit_email,
        mawaqit_password=mawaqit_password,
        gmail_user=gmail_user,
        gmail_app_password=gmail_app_password,
        csv_file_path=csv_file_path
    )
    
    if success:
        print("üéâ Mawaqit upload completed successfully!")
    else:
        print("üí• Mawaqit upload failed!")
    
    return success

if __name__ == "__main__":
    main()
