#!/usr/bin/env python3
"""
Automated Mawaqit Prayer Times Uploader
Handles Gmail 2FA and uploads CSV prayer times to Mawaqit backoffice
"""

import imaplib
import email
import re
import time
import os
import csv
from datetime import datetime
from playwright.sync_api import sync_playwright, expect

def get_latest_mawaqit_2fa_code(gmail_user, gmail_app_password, max_wait=120):
    """
    Fetch the latest 2FA code from Gmail for Mawaqit
    """
    print("üîç Checking Gmail for 2FA code...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait:
        try:
            # Connect to Gmail via IMAP
            imap = imaplib.IMAP4_SSL("imap.gmail.com")
            imap.login(gmail_user, gmail_app_password)
            imap.select("inbox")

            # Search for recent emails from Mawaqit
            status, messages = imap.search(None, '(FROM "noreply@mawaqit.net" OR FROM "no-reply@mawaqit.net")')
            
            if status != 'OK' or not messages[0]:
                print("‚è≥ No Mawaqit emails found, waiting...")
                time.sleep(10)
                continue

            mail_ids = messages[0].split()
            
            # Check the most recent emails for 2FA code
            for mail_id in reversed(mail_ids[-5:]):  # Check last 5 emails
                status, msg_data = imap.fetch(mail_id, "(RFC822)")
                if status != 'OK':
                    continue
                    
                raw_msg = msg_data[0][1]
                msg = email.message_from_bytes(raw_msg)
                
                # Get email date
                email_date = email.utils.parsedate_to_datetime(msg['Date'])
                
                # Only process emails from the last 10 minutes
                if (datetime.now(email_date.tzinfo) - email_date).total_seconds() > 600:
                    continue
                
                # Extract email body
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            try:
                                body += part.get_payload(decode=True).decode('utf-8', errors='ignore')
                            except:
                                continue
                else:
                    try:
                        body = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
                    except:
                        continue

                # Look for 6-digit verification code
                code_match = re.search(r'\b(\d{6})\b', body)
                if code_match and 'verification' in body.lower():
                    code = code_match.group(1)
                    print(f"‚úÖ Found 2FA code: {code}")
                    imap.close()
                    imap.logout()
                    return code
            
            print("‚è≥ No recent 2FA code found, waiting...")
            imap.close()
            imap.logout()
            time.sleep(10)
            
        except Exception as e:
            print(f"‚ùå Error checking email: {e}")
            time.sleep(10)
    
    print("‚ùå Timeout waiting for 2FA code")
    return None

def read_prayer_times_csv(athan_csv_path, iqama_csv_path):
    """
    Read prayer times from CSV files generated by scraper
    Returns dict with days as keys and prayer times as values
    """
    prayer_times = {}
    
    try:
        # Read Athan times
        athan_times = {}
        with open(athan_csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                day = row.get('Day')
                if day:
                    athan_times[int(day)] = {
                        'fajr': row.get('Fajr', ''),
                        'sunrise': row.get('Sunrise', ''),
                        'dhuhr': row.get('Dhuhr', ''),
                        'asr': row.get('Asr', ''),
                        'maghrib': row.get('Maghrib', ''),
                        'isha': row.get('Isha', '')
                    }
        
        # Read Iqama times
        iqama_times = {}
        with open(iqama_csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                day = row.get('Day')
                if day:
                    iqama_times[int(day)] = {
                        'fajr': row.get('Fajr', ''),
                        'dhuhr': row.get('Dhuhr', ''),
                        'asr': row.get('Asr', ''),
                        'maghrib': row.get('Maghrib', ''),
                        'isha': row.get('Isha', '')
                    }
        
        # Combine both into prayer_times dict
        for day in athan_times:
            prayer_times[day] = {
                'athan': athan_times[day],
                'iqama': iqama_times.get(day, {})
            }
    
    except Exception as e:
        print(f"‚ùå Error reading CSV files: {e}")
        return {}
    
    print(f"üìä Loaded {len(prayer_times)} days of prayer times from CSV files")
    return prayer_times

def upload_to_mawaqit(mawaqit_email, mawaqit_password, gmail_user, gmail_app_password, prayer_times_dir):
    """
    Main function to login to Mawaqit and upload prayer times
    """
    print("üöÄ Starting Mawaqit upload process...")
    
    # Get current month name for CSV files
    current_month = datetime.now().strftime('%B')
    athan_csv_path = os.path.join(prayer_times_dir, f'athan_times_{current_month}.csv')
    iqama_csv_path = os.path.join(prayer_times_dir, f'iqama_times_{current_month}.csv')
    
    print(f"üóìÔ∏è Current month: {current_month}")
    print(f"üìÇ Looking for Athan CSV: {athan_csv_path}")
    print(f"üìÇ Looking for Iqama CSV: {iqama_csv_path}")
    
    # Check if CSV files exist
    if not os.path.exists(athan_csv_path) or not os.path.exists(iqama_csv_path):
        print(f"‚ùå CSV files not found:")
        print(f"   Athan exists: {os.path.exists(athan_csv_path)}")
        print(f"   Iqama exists: {os.path.exists(iqama_csv_path)}")
        
        # List what files ARE in the directory
        if os.path.exists(prayer_times_dir):
            print(f"üìÅ Files in {prayer_times_dir}:")
            for file in os.listdir(prayer_times_dir):
                print(f"   - {file}")
        
        return False
    
    # Read prayer times from CSV files
    prayer_times = read_prayer_times_csv(athan_csv_path, iqama_csv_path)
    if not prayer_times:
        print("‚ùå No prayer times found in CSV files")
        return False
    
    # Log some sample data
    sample_day = list(prayer_times.keys())[0]
    print(f"üìä Sample data for day {sample_day}:")
    print(f"   Athan: {prayer_times[sample_day]['athan']}")
    print(f"   Iqama: {prayer_times[sample_day]['iqama']}")
    
    with sync_playwright() as p:
        # Launch browser
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()
        
        try:
            # Navigate to Mawaqit login
            print("üåê Navigating to Mawaqit login...")
            page.goto("https://mawaqit.net/en/backoffice/login", wait_until="networkidle")
            
            # Fill login form
            print("üìù Filling login credentials...")
            page.fill('input[type="email"]', mawaqit_email)
            page.fill('input[type="password"]', mawaqit_password)
            
            # Submit login
            page.click('button[type="submit"]')
            print("üîë Login submitted, waiting for 2FA...")
            
            # Wait for 2FA page or dashboard
            page.wait_for_load_state("networkidle")
            
            # Check if 2FA is required
            if "verification" in page.content().lower() or "code" in page.content().lower():
                print("üìß 2FA required, fetching code from Gmail...")
                
                # Get 2FA code from email
                verification_code = get_latest_mawaqit_2fa_code(gmail_user, gmail_app_password)
                
                if not verification_code:
                    print("‚ùå Failed to get 2FA code")
                    return False
                
                # Enter 2FA code
                code_input = page.locator('input[placeholder*="code" i], input[name*="code" i], input[type="text"]').first
                code_input.fill(verification_code)
                
                # Submit 2FA
                page.click('button[type="submit"]')
                print("‚úÖ 2FA code submitted")
                
                page.wait_for_load_state("networkidle")
            
            # Navigate to Configuration ‚Üí Athan & Iqama
            print("üèõÔ∏è Navigating to Athan & Iqama configuration...")
            
            try:
                # Wait for page to load completely
                page.wait_for_load_state("networkidle")
                
                # Look for Configuration menu/link
                if page.locator('text="Configuration"').count() > 0:
                    page.click('text="Configuration"')
                    page.wait_for_load_state("networkidle")
                    print("‚úÖ Clicked Configuration")
                
                # Look for Athan & Iqama link
                if page.locator('text="Athan & Iqama"').count() > 0:
                    page.click('text="Athan & Iqama"')
                    page.wait_for_load_state("networkidle")
                    print("‚úÖ Navigated to Athan & Iqama page")
                elif page.locator('text="Athan"').count() > 0:
                    page.click('text="Athan"')
                    page.wait_for_load_state("networkidle")
                    print("‚úÖ Navigated to Athan page")
                
                # Wait for the calendar/form to load
                page.wait_for_timeout(3000)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Navigation error: {e}")
                print("üîç Taking screenshot for debugging...")
                page.screenshot(path="debug_navigation.png")
            
            # Fill prayer times for each day of the month
            print("üìÖ Filling prayer times...")
            
            # Get today's date to highlight current day
            today = datetime.now().day
            print(f"üìÖ Today is day {today} of the month")
            
            filled_days = 0
            for day, times in prayer_times.items():
                try:
                    day_marker = "üî• TODAY" if day == today else ""
                    print(f"Processing day {day} {day_marker}...")
                    
                    # Log the times we're about to upload for today
                    if day == today:
                        print(f"üïê Today's Athan times: Fajr={times['athan']['fajr']}, Dhuhr={times['athan']['dhuhr']}, Asr={times['athan']['asr']}, Maghrib={times['athan']['maghrib']}, Isha={times['athan']['isha']}")
                        print(f"üïê Today's Iqama times: Fajr={times['iqama']['fajr']}, Dhuhr={times['iqama']['dhuhr']}, Asr={times['iqama']['asr']}, Maghrib={times['iqama']['maghrib']}, Isha={times['iqama']['isha']}")
                    
                    # Fill Athan times (based on Mawaqit's form structure)
                    athan_times = times['athan']
                    
                    # Try different selector patterns for day inputs
                    # Pattern 1: day-based inputs
                    day_selectors = [
                        f'input[name*="day_{day}"]',
                        f'input[data-day="{day}"]',
                        f'td[data-day="{day}"] input',
                        f'.day-{day} input'
                    ]
                    
                    # Try to find and fill Fajr time for this day
                    fajr_filled = False
                    for selector_pattern in day_selectors:
                        fajr_selectors = [
                            f'{selector_pattern}[name*="fajr"]',
                            f'{selector_pattern}[placeholder*="Fajr"]',
                            f'{selector_pattern}.fajr'
                        ]
                        
                        for fajr_selector in fajr_selectors:
                            if page.locator(fajr_selector).count() > 0:
                                page.fill(fajr_selector, athan_times['fajr'])
                                fajr_filled = True
                                break
                        
                        if fajr_filled:
                            break
                    
                    # Similar pattern for other prayers
                    prayer_names = ['dhuhr', 'asr', 'maghrib', 'isha']
                    iqama_times = times['iqama']
                    
                    for prayer in prayer_names:
                        # Fill Athan time
                        if athan_times.get(prayer):
                            athan_selectors = [
                                f'input[name*="day_{day}"][name*="{prayer}"][name*="athan"]',
                                f'input[data-day="{day}"][data-prayer="{prayer}"][data-type="athan"]',
                                f'td[data-day="{day}"] input[name*="{prayer}"].athan'
                            ]
                            
                            for selector in athan_selectors:
                                if page.locator(selector).count() > 0:
                                    page.fill(selector, athan_times[prayer])
                                    break
                        
                        # Fill Iqama time
                        if iqama_times.get(prayer):
                            iqama_selectors = [
                                f'input[name*="day_{day}"][name*="{prayer}"][name*="iqama"]',
                                f'input[data-day="{day}"][data-prayer="{prayer}"][data-type="iqama"]',
                                f'td[data-day="{day}"] input[name*="{prayer}"].iqama'
                            ]
                            
                            for selector in iqama_selectors:
                                if page.locator(selector).count() > 0:
                                    page.fill(selector, iqama_times[prayer])
                                    break
                    
                    filled_days += 1
                    
                    # Add small delay to avoid overwhelming the form
                    page.wait_for_timeout(100)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Error filling day {day}: {e}")
                    continue
            
            print(f"‚úÖ Filled prayer times for {filled_days} days")
            
            # Save the changes
            print("üíæ Saving changes...")
            
            # Look for Save button
            save_selectors = [
                'button:has-text("Save")',
                'input[type="submit"][value*="Save"]',
                'button[type="submit"]',
                '.btn-save',
                '#save-btn'
            ]
            
            saved = False
            for save_selector in save_selectors:
                if page.locator(save_selector).count() > 0:
                    page.click(save_selector)
                    saved = True
                    print("‚úÖ Save button clicked")
                    break
            
            if not saved:
                print("‚ö†Ô∏è Could not find save button, taking screenshot for debugging")
                page.screenshot(path="debug_save_button.png")
            
            # Wait for save to complete
            page.wait_for_load_state("networkidle")
            page.wait_for_timeout(2000)
            
            print("‚úÖ Upload process completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Error during upload: {e}")
            return False
        finally:
            browser.close()

def main():
    """
    Main entry point
    """
    # Get credentials from environment variables
    mawaqit_email = os.getenv('MAWAQIT_USER')
    mawaqit_password = os.getenv('MAWAQIT_PASS')
    gmail_user = os.getenv('GMAIL_USER')
    gmail_app_password = os.getenv('GMAIL_APP_PASSWORD')
    
    # Path to your prayer times directory
    prayer_times_dir = os.getenv('PRAYER_TIMES_DIR', './prayer_times')
    
    if not all([mawaqit_email, mawaqit_password, gmail_user, gmail_app_password]):
        print("‚ùå Missing required environment variables")
        print("Required: MAWAQIT_USER, MAWAQIT_PASS, GMAIL_USER, GMAIL_APP_PASSWORD")
        return False
    
    success = upload_to_mawaqit(
        mawaqit_email=mawaqit_email,
        mawaqit_password=mawaqit_password,
        gmail_user=gmail_user,
        gmail_app_password=gmail_app_password,
        prayer_times_dir=prayer_times_dir
    )
    
    if success:
        print("üéâ Mawaqit upload completed successfully!")
    else:
        print("üí• Mawaqit upload failed!")
    
    return success

if __name__ == "__main__":
    main()
